plot(vecchi,ii)
}
dev.off()
pdf("trim_new.pdf",paper='a4r',width=0)
for (ii in 1:length(nuovi$nomi)){
#plot(nuovi,ii)
plot(nuovi,ii,vecchi,quarterly = TRUE)
#plot(nuovi,ii,vecchi,quarterly = TRUE, last_percentage_vars=30) # per forzare il numero di variazioni percentuali da mostrare, a partire da fine serie
}
dev.off()
# check tabella modelli per coerenza parametro LAM
temp1 <- modelli_nuovi[modelli_nuovi$NOME_TS %in% nuovi$nomi & modelli_nuovi$PROGRESSIVO==10,]
temp2 <- nuovi$tfit[,c("TITLE","Lam")]
tempm <- merge(temp1,temp2,by.x="NOME_TS",by.y="TITLE")
tempd <- tempm$MODELLO!=tempm$Lam
cat("\n\n","********************************","\n")
cat("Problemi nella tabella modelli nuovi")
cat("\n","********************************","\n\n")
if(sum(tempd) != 0) { cat("Problema di coincidenza tra LAM e par. MODELLO nelle serie", tempm[tempd!=0,"NOME_TS"] ,sep="\n")} else {cat('')}
# check tabella modelli
if(length(grep('[rR][sS][aA]',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro RSA","\n")} else {cat('')}
if(length(grep('[lL][aA][mM]=-1',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro LAM=-1","\n")} else {cat('')}
if(length(grep('[iI][nN][iI][cC]',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro INIC","\n")} else {cat('')}
if(length(grep('[iI][dD][iI][fF]',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro IDIF","\n")} else {cat('')}
if(length(grep('[iI][aA][tT][iI][pP]',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro IATIP","\n")} else {cat('')}
if(length(grep('[iI][eE][aA][sS][tT]=-1',modelli_nuovi$PARAMETRO)) > 0) {cat("Problema con il parametro IEAST=-1","\n")} else {cat('')}
# vecchia versione
# if (exists('modelli_finali')){
#    if (diffmod==TRUE){
#       modelli_finali <- rbind(modelli_finali,diffmodelli(modelli_nuovi,modelli_orig))
#    } else {
#       modelli_finali <- rbind(modelli_finali,modelli_nuovi)
#    }
#    modelli_finali <- rbind(modelli_finali,diffmodelli(modelli_nuovi,modelli_orig))
# } else {
#    if (diffmod==TRUE){
#       modelli_finali <- diffmodelli(modelli_nuovi,modelli_orig)
#    } else {
#       modelli_finali <- modelli_nuovi
#    }
# }
# nuova versione
# scrivi file modelli
if (diffmod==TRUE){
modelli_finali <- diffmodelli(modelli_nuovi,modelli_orig)
} else {
modelli_finali <- modelli_nuovi
}
# esporta serie in formato csv
if(outputdata==TRUE){
write.csv2(x=nuovi$serie_grezza,file="grezzi_trim.csv",row.names=paste(trunc(time(nuovi$serie_grezza)),cycle(nuovi$serie_grezza),sep='q'))
write.csv2(x=nuovi$serie_sa,file="sa_new_trim.csv",row.names=paste(trunc(time(nuovi$serie_grezza)),cycle(nuovi$serie_grezza),sep='q'))
write.csv2(x=nuovi$serie_wd,file="wda_new_trim.csv",row.names=paste(trunc(time(nuovi$serie_grezza)),cycle(nuovi$serie_grezza),sep='q'))
write.csv2(x=vecchi$serie_sa,file="sa_old_trim.csv",row.names=paste(trunc(time(nuovi$serie_grezza)),cycle(nuovi$serie_grezza),sep='q'))
}
}
}
# scrivi file modelli
# modifica la data di partenza dei modelli
# inserire qui altre eventuali modifiche
if (!is.null(modelli_finali)){
modelli_finali$ANNO_INI <- datapartenza[1]
modelli_finali$MESE_INI <- datapartenza[2]
#modelli_finali[modelli_finali$ANNO_BASE==2010,]$ANNO_BASE <- 2015
}
write.table(modelli_finali,"modelli_finali.txt",quote=F,col.names=F,row.names=F,sep=";",na="null")
if (file.exists("serienewmens.txt")){ prepare_JDplus_file("serienewmens.txt", "serienewmens_JD.txt")}
if (file.exists("seriemens.txt")){ prepare_JDplus_file("seriemens.txt", "seriemens_JD.txt")}
if (file.exists("serienewtrim.txt")){ prepare_JDplus_file("serienewtrim.txt", "serienewtrim_JD.txt")}
if (file.exists("serietrim.txt")){ prepare_JDplus_file("serietrim.txt", "serietrim_JD.txt")}
if (file.exists("serie.txt")){ prepare_JDplus_file("serie.txt", "serie_JD.txt")}
if (file.exists("serienew.txt")){ prepare_JDplus_file("serienew.txt", "serienew_JD.txt")}
sink(file=NULL) # chiudo elaborazione.out
# AUTO-COMMENT -----------------------------------------------------------------
elaborazione_commented <- "elaborazione_commented.out"
if (!file.exists(elaborazione_commented)) {
file.create(elaborazione_commented)
}
if(auto_comment_enable)
{
file.copy( "elaborazione.out", elaborazione_commented, overwrite = TRUE)
zz <- file("elaborazione_commented.out", open="at") # apre in APPEND
sink(zz, type="output")
cat("\n\n","********************************","\n")
cat("Informazioni sui modelli:")
cat("\n","********************************","\n\n")
if ( nrow(nuovi$diagmat) >0)
{
# m_or_t = ""
# if(length(mynamesmens)>length(mynamestrim))  {
#   m_or_t = "m"
# }else{
#   m_or_t = "t"
# }
series_periods = c()
if(length(mynamesmens)>0) { series_periods = c(series_periods, "m") }
if(length(mynamestrim)>0) { series_periods = c(series_periods, "t") }
comment = ""
for(m_or_t in series_periods)
{
if(m_or_t == "m")
{
comment = paste0(comment, "\t\t\t***modelli mensili***\n")
}
else # if(m_or_t == "t")
{
comment = paste0(comment, "\t\t\t***modelli trimestrali***\n")
}
old_series_outlier_dictionary = create_all_series_outlier_dictionary(file=glue("old{m_or_t}\\toutlier.m"))
new_series_outlier_dictionary = create_all_series_outlier_dictionary(file=glue("new{m_or_t}\\toutlier.m"))
change_in_external_regressors = FALSE
df_new_models = read_tfit_file(glue("new{m_or_t}\\tfit.m"))
df_old_models = read_tfit_file(glue("old{m_or_t}\\tfit.m"))
df_new_params = read_diagnostic_file(glue("new{m_or_t}\\tarmapar.m"))
df_old_params = read_diagnostic_file(glue("old{m_or_t}\\tarmapar.m"))
df_calend_new = read_diagnostic_file(glue("new{m_or_t}\\tcalend.m"))
df_calend_old = read_diagnostic_file(glue("old{m_or_t}\\tcalend.m"))
df_reg_new = read_diagnostic_file(glue("new{m_or_t}\\tregvar.m"))
df_reg_old = read_diagnostic_file(glue("old{m_or_t}\\tregvar.m"))
df_ttest_new = read_diagnostic_file(glue("new{m_or_t}\\ttest.m"))
df_ttest_old = read_diagnostic_file(glue("old{m_or_t}\\ttest.m"))
# Metto in maiuscolo i nomi delle serie in tutti i dataframe creati in precedenza, altrimenti a volte ho problemi
data_frame_names <- c("df_new_models", "df_old_models", "df_new_params", "df_old_params", "df_calend_new", "df_calend_old", "df_reg_new", "df_reg_old", "df_ttest_new", "df_ttest_old")
for (name in data_frame_names) {
df <- get(name)
df$TITLE <- toupper(df$TITLE)
assign(name, df)  # Sostituisci il data frame originale con la versione modificata
}
first_model_diff = TRUE
for(titolo in nuovi$diagmat$TITLE)
{
new_model = df_new_models[df_new_models$TITLE==paste0("\"",titolo,"\""),]
old_model = df_old_models[df_old_models$TITLE==paste0("\"",titolo,"\""),]
regressors_old = extract_regressors_from_string(df_reg_old[df_reg_old$TITLE==titolo,]$params_string)
regressors_new = extract_regressors_from_string(df_reg_new[df_reg_new$TITLE==titolo,]$params_string)
regressors_variations = FALSE
# if(length(regressors_new[[1]]) != length(regressors_old[[1]])) {regressors_variations=TRUE}
if(length(regressors_new) != length(regressors_old)) {regressors_variations=TRUE}
easter_variations = (new_model$EE  != old_model$EE)
model_variations = (new_model$Lam!=old_model$Lam || new_model$Mean!=old_model$Mean ||
new_model$P  !=old_model$P   || new_model$D !=old_model$D   || new_model$Q !=old_model$Q ||
new_model$BP !=old_model$BP  || new_model$BD!=old_model$BD  || new_model$BQ!=old_model$BQ ||
easter_variations || regressors_variations)
if(is.na(model_variations))
{
model_variations = FALSE
}
comment = paste(comment, "\n\t\t", titolo, "\n")
comment = paste(comment, "Modello originale:\n###\n")
diagnostica_originale     = vecchi$diagmat[vecchi$diagmat[,"TITLE"] == titolo, c("BIC","QR.prob","QR2.prob","QSR.prob","N.prob","N.test","TVA","TVC")]
diagnostica_originale_str = paste(diagnostica_originale, collapse = "\t")
comment = paste0(comment, "###" , diagnostica_originale_str, "\n")
#vecchi$diagmat[vecchi$diagmat[,"N.prob"]<=0.05,c("TITLE","BIC","QR.prob","QR2.prob","QSR.prob","N.prob","N.test","TVA","TVC")]
#nuovi$diagmat[nuovi$diagmat[,"N.prob"]<=0.05,c("TITLE","BIC","QR.prob","QR2.prob","QSR.prob","N.prob","N.test","TVA","TVC")]
comment = paste0(comment, "###", print_dictionary_values(old_series_outlier_dictionary[titolo]), "\n")
#comment = paste0(comment, "###\n###", outlier_variations, "\n")
if(model_variations || always_print_full_model_comment)
{
tarmapar_header = "  MEAN      (t)       PHI1       (t)       PHI2       (t)       PHI3       (t)       BPHI       (t)        TH1       (t)        TH2       (t)        TH3       (t)        BTH       (t)"
comment = paste0(comment, "###" , tarmapar_header, "\n")
comment = paste0(comment, "###" , df_old_params[df_old_params$TITLE==titolo,]$params_string, "\n")
if(length(regressors_old)>0)
{
#comment = paste0(comment, "###" , regressors_old[[1]], "\n")
comment = paste0(comment, "###" , df_reg_old[df_reg_old$TITLE==titolo,]$params_string, "\n")
}
}
# stampa la Pasqua solo se ci sono variazioni
# if((easter_variations && old_model$EE==1) || always_print_full_model_comment) # la pasqua c'era nel modello vecchio perciò è stata tolta nel nuovo
# {
#   easter_effect_old = df_calend_old[df_calend_old$TITLE==titolo,]$params_string
#   easter_effect_old = get_EE(easter_effect_old)
#
#   comment = paste0(comment, "###  EE:" , easter_effect_old, "\n")
# }
if(nrow(old_model)>0 && old_model$EE==1) # stampa la Pasqua sempre, se c'è
{
easter_effect_old = df_calend_old[df_calend_old$TITLE==titolo,]$params_string
easter_effect_old = get_EE(easter_effect_old)
comment = paste0(comment, "###  EE:" , easter_effect_old, "\n")
}
comment = paste(comment, "\nModello nuovo:\n")
outlier_variations = compare_dicts(old_dict = old_series_outlier_dictionary[[titolo]], new_series_outlier_dictionary[[titolo]])
if(!model_variations && outlier_variations=="")  # può dare problemi se si sostituisce un regressore con un altro (nel caso togliere questo if e lasciare il codice sottostante fuori dal blocco else (non essendoci if non servirà scrivere else))
{
comment = paste0(comment, "\t\t\t\t" , "nessuna variazione da modello originale", "\n")
}
else
{
comment = paste0(comment,"###\n")
if(outlier_variations != "" || easter_variations || regressors_variations)
{
comment = paste0(comment, "###")
if(outlier_variations != "")
{
comment = paste0(comment, outlier_variations)
}
if(easter_variations)
{
#easter_effect_old = df_old_params[df_old_params$TITLE==titolo,]$params_string
#easter_effect_old = sub(".*\\)", "", easter_effect_old)
if(new_model$EE==0 && old_model$EE==1)
{
easter_effect_old = df_calend_old[df_calend_old$TITLE==titolo,]$params_string
add_or_remove_EE="-"
EE_value = get_EE(easter_effect_old)
}
else #(new_model$EE==1 && old_model$EE==0)
{
easter_effect_new = df_calend_new[df_calend_new$TITLE==titolo,]$params_string
add_or_remove_EE="+"
EE_value = get_EE(easter_effect_new)
}
comment = paste0(comment, add_or_remove_EE ,"EE:" , EE_value, ";")
}
if(regressors_variations)
{
comment = paste0(comment, " Variazioni nei regressori")
}
comment = paste0(comment,"\n")
}
diagnostica_nuova     = nuovi$diagmat[nuovi$diagmat[,"TITLE"] == titolo, c("BIC","QR.prob","QR2.prob","QSR.prob","N.prob","N.test","TVA","TVC")]
diagnostica_nuova_str = paste(diagnostica_nuova, collapse = "\t")
old_model_fit = extract_fit_from_string( df_ttest_old[df_ttest_old$TITLE==titolo,]$params_string )
new_model_fit = extract_fit_from_string( df_ttest_new[df_ttest_new$TITLE==titolo,]$params_string )
comment = paste0(comment, "###" , diagnostica_nuova_str, "\t\t", old_model_fit, "->", new_model_fit ,"\n")
comment = paste0(comment, "###" , print_dictionary_values(new_series_outlier_dictionary[titolo]), "\n")
if(model_variations || always_print_full_model_comment)
{
tarmapar_header = "  MEAN      (t)       PHI1       (t)       PHI2       (t)       PHI3       (t)       BPHI       (t)        TH1       (t)        TH2       (t)        TH3       (t)        BTH       (t)"
comment = paste0(comment, "###" , tarmapar_header, "\n")
specifications = df_new_params[df_new_params$TITLE==titolo,]$params_string
comment = paste0(comment, "###" , specifications, "\n")
if(length(regressors_new)>0)
{
comment = paste0(comment, "###" , df_reg_new[df_reg_new$TITLE==titolo,]$params_string, "\n")
}
}
#if((new_model$EE==1 && always_print_full_model_comment) || (new_model$EE==1 && new_model$EE==0)) # versione che non stampa EE se variano solo outliers
if(new_model$EE==1)
{
easter_effect_new = df_calend_new[df_calend_new$TITLE==titolo,]$params_string
EE_value = get_EE(easter_effect_new)
comment = paste0(comment, "###  EE:" , EE_value, "\n")
}
}
}
}
cat(comment)
}
} else # auto_comment_enable==FALSE
{
zz <- file("elaborazione_commented.out", open="wt") # apre in SOVRASCRITTURA
sink(zz, type="output")
cat("Abilitare auto-comment per scrivere questo file")
}
sink(file=NULL) # close elaborazione_commented.out
###########################
closeAllConnections()
# files_to_send <- c("elaborazione.out", "elaborazione_commented.out", "sa_new.csv", "sa_new_trim.csv", "newt/toutlier.m", "newm/toutlier.m", "confronto_trim_orig_nuovi.pdf", "confronto_mens_orig_nuovi.pdf", "modelli_finali.txt", "modellitrim_nuovi.txt",  "modellimens_nuovi.txt") # all files version
files_to_send <- c("elaborazione.out", "elaborazione_commented.out", "modelli_finali.txt")
if(!is.null(mynamesmens) && length(mynamesmens)>0){
files_to_send <- c(files_to_send, c("sa_new.csv", "newm/toutlier.m", "confronto_mens_orig_nuovi.pdf", "modellimens_nuovi.txt", "mens_new.pdf"))
files_to_send <- c(files_to_send, c("newm/tcalend.m", "newm/tregvar.m", "newm/tarmapar.m", "newm/ttest.m"))
}
if(!is.null(mynamestrim) && length(mynamestrim)>0){
files_to_send <- c(files_to_send, c("sa_new_trim.csv" , "newt/toutlier.m", "confronto_trim_orig_nuovi.pdf", "modellitrim_nuovi.txt", "trim_new.pdf"))
files_to_send <- c(files_to_send, c("newt/tcalend.m", "newt/tregvar.m", "newt/tarmapar.m", "newt/ttest.m"))
}
make_files_to_send_folder(folder_name = "toSend" , to_send = files_to_send, begin_cleaning_folder = TRUE)
# print media annua di serie vecchie e nuove grezze, wda e sa
#for (ii in 1:length(nuovi$nomi)){
#serie <- round(aggregate(cbind(vecchi$serie_grezza[,ii],vecchi$serie_wd[,ii],vecchi$serie_sa[,ii],
#nuovi$serie_grezza[,ii],nuovi$serie_wd[,ii],nuovi$serie_sa[,ii]
#),nfreq=1,FUN=mean),1)
#colnames(serie) <- c(nuovi$nomi[ii],'wda','sa','new','new_wda','new_sa')
#print(serie,print.gap=4)
#cat('\n')
#cat('avg ',round(apply(serie,2,mean),1),sep='     ','\n\n')
#}
setwd("U:\\Desktop\\SITIC-SERVIZI\\")
zz <- file("estrazione.out", open="wt")
sink(zz, type="output")
options(width=210)
# Estrazione dati
# occorre avere installato sqlplus
# e avere un file estrai.sql con i criteri di estrazione
# estrazione da SITIC
#system('sqlplus -s rd_tramo/rdtramo@EXAPES @estrai.sql')
# estrazione da SITIC_TEST
# system("sqlplus -s ts_tramo/tstramo@LIB1B  @estrai.sql")
shell('sqlplus -s UP_ALESSANDRO_PIOVANI/Peterbill2023@EXAPES @estrai.sql')
# legge i file CSV scaricati
indici <- read.table("INDICI.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',4),rep('integer',3),rep('character',6),rep('numeric',2),'character'))
indicisa <- read.table("INDICISA.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',4),rep('integer',3),rep('character',6),rep('numeric',2),'character'))
modelli <-   read.table(  "MODELLI.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',2),'integer',rep('character',7),rep('integer',8),'character','integer'))
riepilogo <- read.table("RIEPILOGO.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',8),rep('integer',6),'character',rep('integer',2)))
# elimina duplicati (dati rivisti)
#cat("indici:",dim(indici),"\n")
#massimo <- aggregate(formula=TIPO_IND~+SERVIZIO+VARIABILE+CATEGORIA_IND+ANNO_BASE+ANNO+MESE+CLASS_1+COD_LIV_1+CODICE_1+CLASS_2+COD_LIV_2+CODICE_2,data=indici,FUN=max)
#indici <- merge(indici,massimo)
#indici <- indici[order(indici$SERVIZIO,indici$VARIABILE,indici$ANNO_BASE,indici$CLASS_1,indici$COD_LIV_1,indici$CODICE_1,indici$CLASS_2,indici$COD_LIV_2,indici$CODICE_2,indici$ANNO,indici$MESE),]
#cat("indici:",dim(indici),"\n\n")
# elimina duplicati (dati rivisti)
#cat("indicisa:",dim(indicisa),"\n")
#massimo <- aggregate(formula=TIPO_IND~+SERVIZIO+VARIABILE+CATEGORIA_IND+ANNO_BASE+ANNO+MESE+CLASS_1+COD_LIV_1+CODICE_1+CLASS_2+COD_LIV_2+CODICE_2,data=indicisa,FUN=max)
#indicisa <- merge(indicisa,massimo)
## ordina
#indicisa <- indicisa[order(indicisa$SERVIZIO,indicisa$VARIABILE,indicisa$ANNO_BASE,indicisa$CLASS_1,indicisa$COD_LIV_1,indicisa$CODICE_1,indicisa$CLASS_2,indicisa$COD_LIV_2,indicisa$CODICE_2,indicisa$ANNO,indicisa$MESE),]
#cat("indicisa:",dim(indicisa),"\n\n")
# seleziona modelli aperti
cat("modelli:",dim(modelli),"\n\n")
modelli <- modelli[is.na(modelli$ANNO_FIN),]
#ordina
modelli <- modelli[order(modelli$COD_LIVELLO_1,modelli$CODICE_1,modelli$COD_LIVELLO_2,modelli$CODICE_2,modelli$NOME_TS,modelli$PROGRESSIVO) ,]
cat("modelli:",dim(modelli),"\n\n")
# seleziona riepilogo aperti
cat("riepilogo:",dim(riepilogo),"\n\n")
riepilogo <- riepilogo[is.na(riepilogo$ANNO_FIN),]
#ordina
riepilogo <- riepilogo[order(riepilogo$SERVIZIO,riepilogo$VARIABILE,riepilogo$ANNO_BASE,riepilogo$CLASS_1,riepilogo$COD_LIV_1,riepilogo$CODICE_1,riepilogo$CLASS_2,riepilogo$COD_LIV_2,riepilogo$CODICE_2) ,]
cat("riepilogo:",dim(riepilogo),"\n\n")
#
# controlla la coerenza tra tabella riepilogo dove APPROCCIO='DIR' e tabella modelli
riepilogodir <- riepilogo[riepilogo$APPROCCIO=='DIR',c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")]
modellidir <- modelli[modelli$PROGRESSIVO==10,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIVELLO_1","CODICE_1","CLASS_2","COD_LIVELLO_2","CODICE_2","ANNO_BASE")]
colnames(riepilogodir) <- c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")
colnames(modellidir) <- c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")
# merge dei due data frame
# la colonna myidm contiene NA dove mancano il modello
# la colonna myidr contiene NA dove mancano la riga riepilogo
merged <- merge(cbind(modellidir,myidm=1:nrow(modellidir)),cbind(riepilogodir,myidr=1:nrow(riepilogodir)),all=TRUE)
if ( sum(is.na(merged))>0) {
cat('################################################################################','\n\n')
cat('ERRORE:: Incoerenza tra tabella modelli e tabella riepilogo','\n\n')
if ( sum(is.na(merged$myidr))>0) {
cat('Ci sono i seguenti modelli apparentemente inutili:','\n')
print(merged[is.na(merged$myidr),1:9])
}
if ( sum(is.na(merged$myidm))>0){
cat('\n','Mancano i modelli per le serie:','\n')
print(merged[is.na(merged$myidm),1:9])
cat('################################################################################','\n\n')
}
}
# dividi indici mensili e trimestrali grezzi
temp <- merge(indici,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],all.x=TRUE)
indicimens <- temp[temp$FREQUENZA==12,names(indici)]
indicitrim <- temp[temp$FREQUENZA==4,names(indici)]
# dividi indici mensili e trimestrali sa
temp <- merge(indicisa,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],all.x=TRUE)
indicisamens <- temp[temp$FREQUENZA==12,names(indici)]
indicisatrim <- temp[temp$FREQUENZA==4,names(indici)]
# dividi modelli mensili e trimestrali
temp <- merge(modelli,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],
by.x=c("SERVIZIO","VARIABILE","CLASS_1","COD_LIVELLO_1","CODICE_1","CLASS_2","COD_LIVELLO_2","CODICE_2"),
by.y=c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2"),
all.x=TRUE)
modellimens <- temp[temp$FREQUENZA==12,names(modelli)]
modellitrim <- temp[temp$FREQUENZA==4,names(modelli)]
nomi_ts_trim <- paste0("\"", unique(gsub("\\s+", "", modellitrim$NOME_TS)) , "\"", collapse = ", ")
nomi_ts_mens <- paste0("\"", unique(gsub("\\s+", "", modellimens$NOME_TS)) , "\"", collapse = ", ")
cat('################################################################################','\n\n')
cat("Ci sono", sum(modellimens$PROGRESSIVO==10) , "serie mensili da destagionalizzare in questo gruppo di serie:","\n")
if(nomi_ts_mens!="\"\"") cat("\n\t", nomi_ts_mens,"\n")
cat("\n\nCi sono", sum(modellitrim$PROGRESSIVO==10), "serie trimestrali da destagionalizzare in questo gruppo di serie:","\n")
if(nomi_ts_trim!="\"\"") cat("\n\t", nomi_ts_trim, "\n\n")
cat('################################################################################','\n\n')
# scrivi i file con indici, modelli, riepilogo
# all'inizio modelli_nuovi e modelli_vecchi coincidono
if (sum(modellimens$PROGRESSIVO==10)>0){
write.table(modellimens,file="modellimens_orig.txt",sep=";",quote=F,row.names=F)
write.table(modellimens,file="modellimens_nuovi.txt",sep=";",quote=F,row.names=F)
write.table(indicimens,file="indicimens.txt",sep=";",quote=F,row.names=F)
write.table(indicisamens,file="indicisamens.txt",sep=";",quote=F,row.names=F)
}
if (sum(modellitrim$PROGRESSIVO==10)>0){
write.table(modellitrim,file="modellitrim_orig.txt",sep=";",quote=F,row.names=F)
write.table(modellitrim,file="modellitrim_nuovi.txt",sep=";",quote=F,row.names=F)
write.table(indicitrim,file="indicitrim.txt",sep=";",quote=F,row.names=F)
write.table(indicisatrim,file="indicisatrim.txt",sep=";",quote=F,row.names=F)
}
write.table(riepilogo,file="riepilogo.txt",sep=";",quote=F,row.names=F)
#
######### controlla quali serie non sono destagionalizzate
#
if (nrow(riepilogo[riepilogo$AGGIUSTAMENTO>4,])>0){
cat('################################################################################','\n\n')
cat('\n\n','Serie destagionalizzate copiate dalla grezza','\n\n')
print(riepilogo[riepilogo$AGGIUSTAMENTO>4,])}
cat('################################################################################','\n\n')
closeAllConnections()
setwd("U:\\Desktop\\SITIC-SERVIZI\\")
zz <- file("estrazione.out", open="wt")
sink(zz, type="output")
options(width=210)
# Estrazione dati
# occorre avere installato sqlplus
# e avere un file estrai.sql con i criteri di estrazione
# estrazione da SITIC
#system('sqlplus -s rd_tramo/rdtramo@EXAPES @estrai.sql')
# estrazione da SITIC_TEST
# system("sqlplus -s ts_tramo/tstramo@LIB1B  @estrai.sql")
shell('sqlplus -s UP_ALESSANDRO_PIOVANI/Peterbill2023@EXAPES @estrai.sql')
# legge i file CSV scaricati
indici <- read.table("INDICI.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',4),rep('integer',3),rep('character',6),rep('numeric',2),'character'))
indicisa <- read.table("INDICISA.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',4),rep('integer',3),rep('character',6),rep('numeric',2),'character'))
modelli <-   read.table(  "MODELLI.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',2),'integer',rep('character',7),rep('integer',8),'character','integer'))
riepilogo <- read.table("RIEPILOGO.CSV",dec=".",sep=";",header=TRUE,strip.white = TRUE,
colClasses=c(rep('character',8),rep('integer',6),'character',rep('integer',2)))
# elimina duplicati (dati rivisti)
#cat("indici:",dim(indici),"\n")
#massimo <- aggregate(formula=TIPO_IND~+SERVIZIO+VARIABILE+CATEGORIA_IND+ANNO_BASE+ANNO+MESE+CLASS_1+COD_LIV_1+CODICE_1+CLASS_2+COD_LIV_2+CODICE_2,data=indici,FUN=max)
#indici <- merge(indici,massimo)
#indici <- indici[order(indici$SERVIZIO,indici$VARIABILE,indici$ANNO_BASE,indici$CLASS_1,indici$COD_LIV_1,indici$CODICE_1,indici$CLASS_2,indici$COD_LIV_2,indici$CODICE_2,indici$ANNO,indici$MESE),]
#cat("indici:",dim(indici),"\n\n")
# elimina duplicati (dati rivisti)
#cat("indicisa:",dim(indicisa),"\n")
#massimo <- aggregate(formula=TIPO_IND~+SERVIZIO+VARIABILE+CATEGORIA_IND+ANNO_BASE+ANNO+MESE+CLASS_1+COD_LIV_1+CODICE_1+CLASS_2+COD_LIV_2+CODICE_2,data=indicisa,FUN=max)
#indicisa <- merge(indicisa,massimo)
## ordina
#indicisa <- indicisa[order(indicisa$SERVIZIO,indicisa$VARIABILE,indicisa$ANNO_BASE,indicisa$CLASS_1,indicisa$COD_LIV_1,indicisa$CODICE_1,indicisa$CLASS_2,indicisa$COD_LIV_2,indicisa$CODICE_2,indicisa$ANNO,indicisa$MESE),]
#cat("indicisa:",dim(indicisa),"\n\n")
# seleziona modelli aperti
cat("modelli:",dim(modelli),"\n\n")
modelli <- modelli[is.na(modelli$ANNO_FIN),]
#ordina
modelli <- modelli[order(modelli$COD_LIVELLO_1,modelli$CODICE_1,modelli$COD_LIVELLO_2,modelli$CODICE_2,modelli$NOME_TS,modelli$PROGRESSIVO) ,]
cat("modelli:",dim(modelli),"\n\n")
# seleziona riepilogo aperti
cat("riepilogo:",dim(riepilogo),"\n\n")
riepilogo <- riepilogo[is.na(riepilogo$ANNO_FIN),]
#ordina
riepilogo <- riepilogo[order(riepilogo$SERVIZIO,riepilogo$VARIABILE,riepilogo$ANNO_BASE,riepilogo$CLASS_1,riepilogo$COD_LIV_1,riepilogo$CODICE_1,riepilogo$CLASS_2,riepilogo$COD_LIV_2,riepilogo$CODICE_2) ,]
cat("riepilogo:",dim(riepilogo),"\n\n")
#
# controlla la coerenza tra tabella riepilogo dove APPROCCIO='DIR' e tabella modelli
riepilogodir <- riepilogo[riepilogo$APPROCCIO=='DIR',c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")]
modellidir <- modelli[modelli$PROGRESSIVO==10,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIVELLO_1","CODICE_1","CLASS_2","COD_LIVELLO_2","CODICE_2","ANNO_BASE")]
colnames(riepilogodir) <- c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")
colnames(modellidir) <- c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","ANNO_BASE")
# merge dei due data frame
# la colonna myidm contiene NA dove mancano il modello
# la colonna myidr contiene NA dove mancano la riga riepilogo
merged <- merge(cbind(modellidir,myidm=1:nrow(modellidir)),cbind(riepilogodir,myidr=1:nrow(riepilogodir)),all=TRUE)
if ( sum(is.na(merged))>0) {
cat('################################################################################','\n\n')
cat('ERRORE:: Incoerenza tra tabella modelli e tabella riepilogo','\n\n')
if ( sum(is.na(merged$myidr))>0) {
cat('Ci sono i seguenti modelli apparentemente inutili:','\n')
print(merged[is.na(merged$myidr),1:9])
}
if ( sum(is.na(merged$myidm))>0){
cat('\n','Mancano i modelli per le serie:','\n')
print(merged[is.na(merged$myidm),1:9])
cat('################################################################################','\n\n')
}
}
# dividi indici mensili e trimestrali grezzi
temp <- merge(indici,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],all.x=TRUE)
indicimens <- temp[temp$FREQUENZA==12,names(indici)]
indicitrim <- temp[temp$FREQUENZA==4,names(indici)]
# dividi indici mensili e trimestrali sa
temp <- merge(indicisa,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],all.x=TRUE)
indicisamens <- temp[temp$FREQUENZA==12,names(indici)]
indicisatrim <- temp[temp$FREQUENZA==4,names(indici)]
# dividi modelli mensili e trimestrali
temp <- merge(modelli,riepilogo[,c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2","FREQUENZA")],
by.x=c("SERVIZIO","VARIABILE","CLASS_1","COD_LIVELLO_1","CODICE_1","CLASS_2","COD_LIVELLO_2","CODICE_2"),
by.y=c("SERVIZIO","VARIABILE","CLASS_1","COD_LIV_1","CODICE_1","CLASS_2","COD_LIV_2","CODICE_2"),
all.x=TRUE)
modellimens <- temp[temp$FREQUENZA==12,names(modelli)]
modellitrim <- temp[temp$FREQUENZA==4,names(modelli)]
nomi_ts_trim <- paste0("\"", unique(gsub("\\s+", "", modellitrim$NOME_TS)) , "\"", collapse = ", ")
nomi_ts_mens <- paste0("\"", unique(gsub("\\s+", "", modellimens$NOME_TS)) , "\"", collapse = ", ")
cat('################################################################################','\n\n')
cat("Ci sono", sum(modellimens$PROGRESSIVO==10) , "serie mensili da destagionalizzare in questo gruppo di serie:","\n")
if(nomi_ts_mens!="\"\"") cat("\n\t", nomi_ts_mens,"\n")
cat("\n\nCi sono", sum(modellitrim$PROGRESSIVO==10), "serie trimestrali da destagionalizzare in questo gruppo di serie:","\n")
if(nomi_ts_trim!="\"\"") cat("\n\t", nomi_ts_trim, "\n\n")
cat('################################################################################','\n\n')
# scrivi i file con indici, modelli, riepilogo
# all'inizio modelli_nuovi e modelli_vecchi coincidono
if (sum(modellimens$PROGRESSIVO==10)>0){
write.table(modellimens,file="modellimens_orig.txt",sep=";",quote=F,row.names=F)
write.table(modellimens,file="modellimens_nuovi.txt",sep=";",quote=F,row.names=F)
write.table(indicimens,file="indicimens.txt",sep=";",quote=F,row.names=F)
write.table(indicisamens,file="indicisamens.txt",sep=";",quote=F,row.names=F)
}
if (sum(modellitrim$PROGRESSIVO==10)>0){
write.table(modellitrim,file="modellitrim_orig.txt",sep=";",quote=F,row.names=F)
write.table(modellitrim,file="modellitrim_nuovi.txt",sep=";",quote=F,row.names=F)
write.table(indicitrim,file="indicitrim.txt",sep=";",quote=F,row.names=F)
write.table(indicisatrim,file="indicisatrim.txt",sep=";",quote=F,row.names=F)
}
write.table(riepilogo,file="riepilogo.txt",sep=";",quote=F,row.names=F)
#
######### controlla quali serie non sono destagionalizzate
#
if (nrow(riepilogo[riepilogo$AGGIUSTAMENTO>4,])>0){
cat('################################################################################','\n\n')
cat('\n\n','Serie destagionalizzate copiate dalla grezza','\n\n')
print(riepilogo[riepilogo$AGGIUSTAMENTO>4,])}
cat('################################################################################','\n\n')
closeAllConnections()
