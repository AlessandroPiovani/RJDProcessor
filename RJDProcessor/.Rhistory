m <- as.integer(format(start_date_ext_reg, "%m"))
start_date <- c(y, m)
# frequency  <- user_def_var$frequency # if I passed the frequency as a metadata
if(is.na(frequency)) # Auto detect of frequency, not possible for TS txt format (this if is never used)
{
#Auto detect of frequency from the data
#browser()
timestamps  <- rownames(data)
start_index <- which(!is.na(series))[1]
d1          <- as.Date(timestamps[start_index])
d2          <- as.Date(timestamps[start_index+1])
month_diff  <- abs(as.numeric(format(d1, "%m")) - as.numeric(format(d2, "%m")))
frequency   <- 12/month_diff
}
mts_file<-NA
# ITERA SULLE COLONNE DEL FILE
for (j in 1:ncol(data)) #one column is the date
{
# browser()
# Ottieni il nome della colonna
column_name <- user_def_var$container
column_name <- gsub("\\.[cC][sS][vV]$", "", column_name)
# Ottieni i dati della colonna
column_data <- data[[j]]
#browser()
index <- which(as.Date(dates_of_variables, format = "%d/%m/%Y") == start_date_ext_reg)
column_data <- column_data[index:length(column_data)]
# create a dummy variable allowing to work with an MTS instead of a TS. Working with MTS allows to set the series names
if(j==1 && length(ts_list)==0)
{
dummy <- ts(data = column_data, class="ts", frequency = frequency, start = start_date)
ts_list <- list("dummy"=dummy)
mts_file_col_names <- c("dummy")
}
# Case of the 6 Trading Days variables in one file
if(user_def_var$n_var > 1)
{
column_name <- paste(column_name, "_", j, sep="")
}
mts_file_col_names <- c(mts_file_col_names, column_name)
time_series_new <- ts(column_data, start = start_date, frequency = frequency)
ts_list[[column_name]] <- time_series_new
}
}
# DUBBI PARTONO QUI
if(length(ts_list)>0)
{
mts_file <- do.call(ts.union, ts_list)
colnames(mts_file) <- mts_file_col_names
mts_file <- mts_file[,-1]
if(all(is.na(mts_total)))
{
mts_total <- mts_file#NA
}else
{
mts_total <- cbind(mts_total, mts_file)
}
mts_file<-NA
}
#browser()
if(length(class(mts_total)=="ts")==1 && class(mts_total)=="ts")
{
#browser()
data_ts <- as.vector(mts_total)
dim(data_ts) <- c(length(mts_total), 1)
dimnames(data_ts) <- list(NULL, column_name)
mts_total <- ts(data = data_ts, start = start_date, frequency = frequency, class=c("mts", "ts", "matrix"), names=c(column_name))
}
return(mts_total)
})
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' regr_directory            <- "../test/CSV-TUR/regr"
#' ws                        <- load_workspace(file = input_workspace_xml)
#' compute(ws)
#' data_reader_ext_reg       <- Data_reader_ext_reg_csv(regr_directory)
#'  all_model_ext_vars_info <- data_reader_ext_reg@read_ext_reg_info(ws) # uncomment this raw and replace AT with its symbol
#'  vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATASA", frequency=12) # uncomment this raw and replace AT with its symbol
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' input_data_file_name      <- "../test/CSV-TUR/grezzi_trim_TUR.csv"
#' regr_directory            <- "../test/CSV-TUR/regr"
#' ws                        <- load_workspace(file = input_workspace_xml)
#' compute(ws)
#' data_reader_ext_reg       <- Data_reader_ext_reg_csv(regr_directory)
#' all_model_ext_vars_info <- data_reader_ext_reg@read_ext_reg_info(ws) # uncomment this raw and replace AT with its symbol
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATASA", frequency=12) # uncomment this raw and replace AT with its symbol
#'
#' @export
setMethod ("read_ext_reg_data", signature("Data_reader_ext_reg_csv", "ANY", "ANY", "ANY"),
function(object, var_info=NULL, time_series_info=NULL, frequency=NA_integer_, ...) {
#browser()
series_name <- time_series_info
reg_directory   <- object@input_source
if(is.null(var_info) || length(var_info)==0)
{
return(NA)
}
ts_list <-list()
mts_total <- NA
# Itera attraverso gli elementi di var_info_list
for (i in seq_along(var_info[[series_name]]))
{
#browser()
user_def_var <- var_info[[series_name]][[i]]
# Given a filename, check if there is a file in the path with the same name but with some uppercase letters,
# which unfortunately are automatically converted to lowercase.
# If the file being searched for is not present but a file that differs only by some uppercase letters is found, read that one.
f_name <- find_file_case_insensitive(reg_directory, user_def_var$container)
# Costruisci il percorso completo del file
full_file_path <- file.path(reg_directory, f_name)
# if(user_def_var$n_var != 1)
# {
col_types <- c("date", rep("numeric", user_def_var$n_var))
# }
# else {
#   col_types <- c("date", "numeric")
# }
# Leggi i dati dal file
suppressMessages({
data <- read.csv(full_file_path, header = TRUE, sep = ";")
#browser()
closeAllConnections()
})
dates_of_variables <- data[, 1]
data <- data[, -1, drop = FALSE] # Remove the column with dates
# Definisci la data di inizio e la frequenza
start_date_ext_reg <- as.Date(user_def_var$start)
y <- as.integer(format(start_date_ext_reg, "%Y"))
m <- as.integer(format(start_date_ext_reg, "%m"))
start_date <- c(y, m)
# frequency  <- user_def_var$frequency # if I passed the frequency as a metadata
if(is.na(frequency)) # Auto detect of frequency, not possible for TS txt format (this if is never used)
{
#Auto detect of frequency from the data
#browser()
timestamps  <- rownames(data)
start_index <- which(!is.na(series))[1]
d1          <- as.Date(timestamps[start_index])
d2          <- as.Date(timestamps[start_index+1])
month_diff  <- abs(as.numeric(format(d1, "%m")) - as.numeric(format(d2, "%m")))
frequency   <- 12/month_diff
}
mts_file<-NA
# ITERA SULLE COLONNE DEL FILE
for (j in 1:ncol(data)) #one column is the date
{
# browser()
# Ottieni il nome della colonna
column_name <- user_def_var$container
column_name <- gsub("\\.[cC][sS][vV]$", "", column_name)
# Ottieni i dati della colonna
column_data <- data[[j]]
#browser()
index <- which(as.Date(dates_of_variables, format = "%d/%m/%Y") == start_date_ext_reg)
column_data <- column_data[index:length(column_data)]
# create a dummy variable allowing to work with an MTS instead of a TS. Working with MTS allows to set the series names
if(j==1 && length(ts_list)==0)
{
dummy <- ts(data = column_data, class="ts", frequency = frequency, start = start_date)
ts_list <- list("dummy"=dummy)
mts_file_col_names <- c("dummy")
}
# Case of the 6 Trading Days variables in one file
if(user_def_var$n_var > 1)
{
column_name <- paste(column_name, "_", j, sep="")
}
mts_file_col_names <- c(mts_file_col_names, column_name)
time_series_new <- ts(column_data, start = start_date, frequency = frequency)
ts_list[[column_name]] <- time_series_new
}
}
# DUBBI PARTONO QUI
if(length(ts_list)>0)
{
mts_file <- do.call(ts.union, ts_list)
colnames(mts_file) <- mts_file_col_names
mts_file <- mts_file[,-1]
if(all(is.na(mts_total)))
{
mts_total <- mts_file#NA
}else
{
mts_total <- cbind(mts_total, mts_file)
}
mts_file<-NA
}
#browser()
if(length(class(mts_total)=="ts")==1 && class(mts_total)=="ts")
{
#browser()
data_ts <- as.vector(mts_total)
dim(data_ts) <- c(length(mts_total), 1)
dimnames(data_ts) <- list(NULL, column_name)
mts_total <- ts(data = data_ts, start = start_date, frequency = frequency, class=c("mts", "ts", "matrix"), names=c(column_name))
}
return(mts_total)
})
input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
input_data_file_name      <- "../test/CSV-TUR/grezzi_trim_TUR.csv"
regr_directory            <- "../test/CSV-TUR/regr"
ws                        <- load_workspace(file = input_workspace_xml)
compute(ws)
data_reader_ext_reg       <- Data_reader_ext_reg_csv(regr_directory)
all_model_ext_vars_info <- data_reader_ext_reg@read_ext_reg_info(ws)
vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATASA", frequency=12) # uncomment this raw and replace AT with its symbol
all_model_ext_vars_info
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' input_data_file_name      <- "../test/CSV-TUR/grezzi_trim_TUR.csv"
#' regr_directory            <- "../test/CSV-TUR/regr"
#' ws                        <- load_workspace(file = input_workspace_xml)
#' compute(ws)
#' data_reader_ext_reg       <- Data_reader_ext_reg_csv(regr_directory)
#' all_model_ext_vars_info <- data_reader_ext_reg@read_ext_reg_info(ws) # uncomment this raw and replace AT with its symbol
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATPSC", frequency=12) # uncomment this raw and replace AT with its symbol
#'
#' @export
setMethod ("read_ext_reg_data", signature("Data_reader_ext_reg_csv", "ANY", "ANY", "ANY"),
function(object, var_info=NULL, time_series_info=NULL, frequency=NA_integer_, ...) {
#browser()
series_name <- time_series_info
reg_directory   <- object@input_source
if(is.null(var_info) || length(var_info)==0)
{
return(NA)
}
ts_list <-list()
mts_total <- NA
# Itera attraverso gli elementi di var_info_list
for (i in seq_along(var_info[[series_name]]))
{
#browser()
user_def_var <- var_info[[series_name]][[i]]
# Given a filename, check if there is a file in the path with the same name but with some uppercase letters,
# which unfortunately are automatically converted to lowercase.
# If the file being searched for is not present but a file that differs only by some uppercase letters is found, read that one.
f_name <- find_file_case_insensitive(reg_directory, user_def_var$container)
# Costruisci il percorso completo del file
full_file_path <- file.path(reg_directory, f_name)
# if(user_def_var$n_var != 1)
# {
col_types <- c("date", rep("numeric", user_def_var$n_var))
# }
# else {
#   col_types <- c("date", "numeric")
# }
# Leggi i dati dal file
suppressMessages({
data <- read.csv(full_file_path, header = TRUE, sep = ";")
#browser()
closeAllConnections()
})
dates_of_variables <- data[, 1]
data <- data[, -1, drop = FALSE] # Remove the column with dates
# Definisci la data di inizio e la frequenza
start_date_ext_reg <- as.Date(user_def_var$start)
y <- as.integer(format(start_date_ext_reg, "%Y"))
m <- as.integer(format(start_date_ext_reg, "%m"))
start_date <- c(y, m)
# frequency  <- user_def_var$frequency # if I passed the frequency as a metadata
if(is.na(frequency)) # Auto detect of frequency, not possible for TS txt format (this if is never used)
{
#Auto detect of frequency from the data
#browser()
timestamps  <- rownames(data)
start_index <- which(!is.na(series))[1]
d1          <- as.Date(timestamps[start_index])
d2          <- as.Date(timestamps[start_index+1])
month_diff  <- abs(as.numeric(format(d1, "%m")) - as.numeric(format(d2, "%m")))
frequency   <- 12/month_diff
}
mts_file<-NA
# ITERA SULLE COLONNE DEL FILE
for (j in 1:ncol(data)) #one column is the date
{
# browser()
# Ottieni il nome della colonna
column_name <- user_def_var$container
column_name <- gsub("\\.[cC][sS][vV]$", "", column_name)
# Ottieni i dati della colonna
column_data <- data[[j]]
#browser()
index <- which(as.Date(dates_of_variables, format = "%d/%m/%Y") == start_date_ext_reg)
column_data <- column_data[index:length(column_data)]
# create a dummy variable allowing to work with an MTS instead of a TS. Working with MTS allows to set the series names
if(j==1 && length(ts_list)==0)
{
dummy <- ts(data = column_data, class="ts", frequency = frequency, start = start_date)
ts_list <- list("dummy"=dummy)
mts_file_col_names <- c("dummy")
}
# Case of the 6 Trading Days variables in one file
if(user_def_var$n_var > 1)
{
column_name <- paste(column_name, "_", j, sep="")
}
mts_file_col_names <- c(mts_file_col_names, column_name)
time_series_new <- ts(column_data, start = start_date, frequency = frequency)
ts_list[[column_name]] <- time_series_new
}
}
# DUBBI PARTONO QUI
if(length(ts_list)>0)
{
mts_file <- do.call(ts.union, ts_list)
colnames(mts_file) <- mts_file_col_names
mts_file <- mts_file[,-1]
if(all(is.na(mts_total)))
{
mts_total <- mts_file#NA
}else
{
mts_total <- cbind(mts_total, mts_file)
}
mts_file<-NA
}
#browser()
if(length(class(mts_total)=="ts")==1 && class(mts_total)=="ts")
{
#browser()
data_ts <- as.vector(mts_total)
dim(data_ts) <- c(length(mts_total), 1)
dimnames(data_ts) <- list(NULL, column_name)
mts_total <- ts(data = data_ts, start = start_date, frequency = frequency, class=c("mts", "ts", "matrix"), names=c(column_name))
}
return(mts_total)
})
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATPSC", frequency=12) # uncomment this raw and replace AT with its symbol
all_model_ext_vars_info
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info, "VATASC", frequency=12) # uncomment this raw and replace AT with its symbol
#' input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
#' input_data_file_name      <- "../test/CSV-TUR/grezzi_trim_TUR.csv"
#' regr_directory            <- "../test/CSV-TUR/regr"
#' ws                        <- load_workspace(file = input_workspace_xml)
#' compute(ws)
#' data_reader_ext_reg       <- Data_reader_ext_reg_csv(regr_directory)
#' all_model_ext_vars_info <- data_reader_ext_reg@read_ext_reg_info(ws) # uncomment this raw and replace AT with its symbol
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info,  frequency=12) # uncomment this raw and replace AT with its symbol
#'
#' @export
setMethod ("read_ext_reg_data", signature("Data_reader_ext_reg_csv", "ANY", "ANY", "ANY"),
function(object, var_info=NULL, time_series_info=NULL, frequency=NA_integer_, ...) {
#browser()
series_name <- time_series_info
reg_directory   <- object@input_source
if(is.null(var_info) || length(var_info)==0)
{
return(NA)
}
ts_list <-list()
mts_total <- NA
# Itera attraverso gli elementi di var_info_list
for (i in seq_along(var_info[[series_name]]))
{
#browser()
user_def_var <- var_info[[series_name]][[i]]
# Given a filename, check if there is a file in the path with the same name but with some uppercase letters,
# which unfortunately are automatically converted to lowercase.
# If the file being searched for is not present but a file that differs only by some uppercase letters is found, read that one.
f_name <- find_file_case_insensitive(reg_directory, user_def_var$container)
# Costruisci il percorso completo del file
full_file_path <- file.path(reg_directory, f_name)
# if(user_def_var$n_var != 1)
# {
col_types <- c("date", rep("numeric", user_def_var$n_var))
# }
# else {
#   col_types <- c("date", "numeric")
# }
# Leggi i dati dal file
suppressMessages({
data <- read.csv(full_file_path, header = TRUE, sep = ";")
#browser()
closeAllConnections()
})
dates_of_variables <- data[, 1]
data <- data[, -1, drop = FALSE] # Remove the column with dates
# Definisci la data di inizio e la frequenza
start_date_ext_reg <- as.Date(user_def_var$start)
y <- as.integer(format(start_date_ext_reg, "%Y"))
m <- as.integer(format(start_date_ext_reg, "%m"))
start_date <- c(y, m)
# frequency  <- user_def_var$frequency # if I passed the frequency as a metadata
if(is.na(frequency)) # Auto detect of frequency, not possible for TS txt format (this if is never used)
{
#Auto detect of frequency from the data
#browser()
timestamps  <- rownames(data)
start_index <- which(!is.na(series))[1]
d1          <- as.Date(timestamps[start_index])
d2          <- as.Date(timestamps[start_index+1])
month_diff  <- abs(as.numeric(format(d1, "%m")) - as.numeric(format(d2, "%m")))
frequency   <- 12/month_diff
}
mts_file<-NA
# ITERA SULLE COLONNE DEL FILE
for (j in 1:ncol(data)) #one column is the date
{
# browser()
# Ottieni il nome della colonna
column_name <- user_def_var$container
column_name <- gsub("\\.[cC][sS][vV]$", "", column_name)
# Ottieni i dati della colonna
column_data <- data[[j]]
#browser()
index <- which(as.Date(dates_of_variables, format = "%d/%m/%Y") == start_date_ext_reg)
column_data <- column_data[index:length(column_data)]
# create a dummy variable allowing to work with an MTS instead of a TS. Working with MTS allows to set the series names
if(j==1 && length(ts_list)==0)
{
dummy <- ts(data = column_data, class="ts", frequency = frequency, start = start_date)
ts_list <- list("dummy"=dummy)
mts_file_col_names <- c("dummy")
}
# Case of the 6 Trading Days variables in one file
if(user_def_var$n_var > 1)
{
column_name <- paste(column_name, "_", j, sep="")
}
mts_file_col_names <- c(mts_file_col_names, column_name)
time_series_new <- ts(column_data, start = start_date, frequency = frequency)
ts_list[[column_name]] <- time_series_new
}
}
# DUBBI PARTONO QUI
if(length(ts_list)>0)
{
mts_file <- do.call(ts.union, ts_list)
colnames(mts_file) <- mts_file_col_names
mts_file <- mts_file[,-1]
if(all(is.na(mts_total)))
{
mts_total <- mts_file#NA
}else
{
mts_total <- cbind(mts_total, mts_file)
}
mts_file<-NA
}
#browser()
if(length(class(mts_total)=="ts")==1 && class(mts_total)=="ts")
{
#browser()
data_ts <- as.vector(mts_total)
dim(data_ts) <- c(length(mts_total), 1)
dimnames(data_ts) <- list(NULL, column_name)
mts_total <- ts(data = data_ts, start = start_date, frequency = frequency, class=c("mts", "ts", "matrix"), names=c(column_name))
}
return(mts_total)
})
#' vars_matrix             <- data_reader_ext_reg@read_ext_reg_data(all_model_ext_vars_info,  frequency=12) # uncomment this raw and replace AT with its symbol
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
input_data_file_name      <- "../test/CSV-TUR/grezzi_trim_TUR.csv"
regr_directory            <- "../test/CSV-TUR/regr"
ws                        <- load_workspace(file = input_workspace_xml)
setwd(getwd())
getwd()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
input_workspace_xml       <- "../test/WorkspaceTUR-container/workspace-TUR.xml"
ws                        <- load_workspace(file = input_workspace_xml)
