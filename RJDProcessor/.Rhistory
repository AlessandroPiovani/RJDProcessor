devtools::build()
# Controlla il pacchetto
check()
install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
.libPaths()
system.file(package = "RJDProcessor")
packageVersion("RJDProcessor")
library(RJDemetra)
library(RJDProcessor)
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\test\\")
############################### Input defintion ################################
JD_JSON_file_full_reduced <- "specifications_new_full.txt"
spec_file_name            <- "specifications_new.txt"
input_workspace_directory <- "WorkspaceFAT-container\\WS-FAT.xml"
input_data_file_name      <- "SITIC-FAT\\grezzi.csv"
regr_directory            <- "SITIC-FAT\\regr"
diff <- TRUE # Reduced JSON if diff=TRUE, Full JSON format otherwise
input_data_reader         <- Data_reader_csv_istat_format(input_source = input_data_file_name)
ext_reg_input_data_reader <- Data_reader_ext_reg_tsplus(regr_directory)
JD_JSON_from_materialized_workspace(input_workspace_directory, ext_reg_input_data_reader, JSON_file_name = "specifications_new.txt", diff=TRUE, java_processing=FALSE)
warnings()
series_to_proc_names <- NA #c("FATEXP_13", "C_DEFL", "FATEXP_14") # NA to process all the series #NA
virtual_workspace    <- JD_JSON_file_processor(input_data_reader = input_data_reader, ext_reg_data_reader = ext_reg_input_data_reader, spec_file_name = spec_file_name, output_workspace_dir = "output_workspace_container", series_to_proc_names = series_to_proc_names, java_processing = TRUE) # = NA) #output_workspace_dir can be omitted
# set java_processor=TRUE to speed-up the operations, but it does not work with workspaces readed by sa-ext plugin
m                    <- get_model(virtual_workspace) #get directly the R model (slower)
from_reduced_to_full_JD_JSON_file(spec_file_name)
from_full_to_reduced_JD_JSON_file(JD_JSON_file = JD_JSON_file_full_reduced)
compare_sa_ts(new_model_workspace = virtual_workspace, old_model_workspace = input_workspace_directory , materialized_ws_new=FALSE, materialized_ws_old=TRUE, java_processing_old_model=FALSE)
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\test")
library(RJDProcessor)
single_workspaces_path <- "splitted_workspaces"
full_workspace         <- "WorkspaceTUR-container\\workspace-TUR.xml"
#full_workspace         <- "output_workspace_container_xlsx\\workspace.xml"
compressed_ws          <-  FALSE
get_single_ts_workspaces(full_workspace, single_workspaces_path, compressed_ws = compressed_ws )
single_ws<-load_workspace(paste0(single_workspaces_path,"\\VATPIC\\VATPIC.xml"))
check_data(c(1,2,3), single_ws)
check_external_regressors(single_ws)
ws_merged           <- merge_workspaces(source_workspaces_path=single_workspaces_path, merged_ws_name = "merged_ws", compressed = TRUE, delete_originals = TRUE, silent=TRUE)
ws_merged_xml_path  <- paste0(single_workspaces_path,"\\","merged_ws","\\","merged_ws",".xml")
dr  <- RJDProcessor::Data_reader_csv_istat_format(input_source = "rawdata_ISTATformat_TUR.csv")
dr2 <- RJDProcessor::Data_reader_csv(input_source = "rawdata_TUR.csv")
update_data(ws_merged_xml_path, dr2)
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\test")
library(RJDProcessor)
single_workspaces_path <- "splitted_workspaces"
full_workspace         <- "WorkspaceTUR-container\\workspace-TUR.xml"
#full_workspace         <- "output_workspace_container_xlsx\\workspace.xml"
compressed_ws          <-  FALSE
get_single_ts_workspaces(full_workspace, single_workspaces_path, compressed_ws = compressed_ws )
ws_merged           <- merge_workspaces(source_workspaces_path=single_workspaces_path, merged_ws_name = "merged_ws", compressed = TRUE, delete_originals = TRUE, silent=TRUE)
ws_merged_xml_path  <- paste0(single_workspaces_path,"\\","merged_ws","\\","merged_ws",".xml")
single_workspaces_path <- "splitted_workspaces"
full_workspace         <- "WorkspaceFAT-container\\WS-FAT.xml"
compressed_ws          <-  FALSE
get_single_ts_workspaces(full_workspace, single_workspaces_path, compressed_ws = compressed_ws )
ws_merged           <- merge_workspaces(source_workspaces_path=single_workspaces_path, merged_ws_name = "merged_ws", compressed = TRUE, delete_originals = TRUE, silent=TRUE)
get_single_ts_workspaces(full_workspace = ws_merged_xml_path, single_workspaces_path = single_workspaces_path, compressed_ws = TRUE )
ws_merged <- merge_workspaces(source_workspaces_path=single_workspaces_path, merged_ws_name = "merged_ws", compressed = TRUE, delete_originals = TRUE, silent=TRUE)
get_single_ts_workspaces(full_workspace = ws_merged_xml_path, single_workspaces_path = single_workspaces_path, compressed_ws = TRUE )
install.packages("roxygen2")
install.packages("roxygen2")
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
library(roxygen2)
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
version(roxygen2)
version("roxygen2")
packageVersion("roxygen2")
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
input_data_reader\@read_data()
#setGeneric("read_data", function(object, ...) standardGeneric("read_data"))
#' Get the data from a csv_data_reader
#'
#' This function returns the data from the input_source of the object.
#'
#' @return data in form of numeric matrix, with rownames = dates (in string format, YYYY-MM-DD) end colnames = time series names (string)
#' @examples
#' input_data_reader <- Data_reader_csv(input_source = input_data_file_name)
#' input_data_reader\@read_data()
#' @export
setMethod ("read_data", signature("Data_reader_csv"),
function(object, ...) {
# Importa il file CSV
#browser()
suppressMessages({
#data <- read_excel(object@input_source, sheet = 1, col_names = TRUE)
data <- read.csv(object@input_source, header = TRUE, sep=";")
closeAllConnections()
})
# Rimuovi le virgolette dai nomi delle colonne e dai valori
names(data) <- gsub("\"", "", names(data))
#data[] <- lapply(data, function(x) gsub("\"", "", x))
timestamps   <- as.Date(data[[1]], format = "%d/%m/%Y")
# Rimuovi la colonna delle date
data <- data[, -1, drop = FALSE] # Remove the column with dates
series_names <-names(data)
# Crea un oggetto mts
mts <- matrix(NA, ncol = length(series_names), nrow = length(timestamps))
colnames(mts) <- series_names
rownames(mts) <- as.character(timestamps)
# auto detection of the time series frequency
d1         <- as.Date(timestamps[1])
d2         <- as.Date(timestamps[2])
month_diff <- abs(as.numeric(format(d1, "%m")) - as.numeric(format(d2, "%m")))
freq       <- 12/month_diff
# Ciclo per creare un oggetto ts per ogni colonna
for (i in 1:ncol(mts)) {
suppressWarnings({
data[[i]] <- as.numeric(data[[i]])  # Convert string "NA" to numeric NA
})
mts[, i] <- ts(data[[i]], start = timestamps[1], frequency = freq)
}
#browser()
return(mts)
})
setwd("C:\\Users\\UTENTE\\Desktop\\MigrazioneFAT-RJDemetra_TEST_3\\")
#library(RJDemetra)
#library(rjson)
source("JD_JSON_file_processor.R")
source("JD_JSON.R")
source("Data_reader_list.R")
source("Data_reader_ext_reg_csv.R")
source("Data_reader_csv_istat_format.R")
input_data_file_name      <- "C:\\Users\\UTENTE\\Desktop\\MigrazioneFAT-RJDemetra_TEST_3\\SITIC-FAT\\grezzi.csv"
input_data_reader         <- Data_reader_csv_istat_format(input_source = input_data_file_name)
data<-input_data_reader@read_data()
row_names <- rownames(data)
FATEXP_10_data<-data[,"FATEXP_10"]
# Find the position of the first not NA value
first_non_na_pos <- which(!is.na(FATEXP_10_data))[1]
# Remove initial NAs
FATEXP_10_data_clean <- FATEXP_10_data[first_non_na_pos:length(FATEXP_10_data)]
FATEXP_10_data_clean <- gsub(",", ".", FATEXP_10_data_clean)
FATEXP_10_data_clean <- as.numeric(FATEXP_10_data_clean)
FATEXP_10_row_names_data_clean <- row_names[first_non_na_pos:length(FATEXP_10_data)]
FATEXP_10_list <- list("series_name"= "FATEXP_10", "dates"= FATEXP_10_row_names_data_clean, "values"= FATEXP_10_data_clean)
#FATEXP_10_list[["dates"]] <- as.Date(FATEXP_10_list[["dates"]])
C_DEFL_data<-data[,"C_DEFL"]
first_non_na_pos <- which(!is.na(C_DEFL_data))[1]
C_DEFL_data_clean <- C_DEFL_data[first_non_na_pos:length(C_DEFL_data)]
C_DEFL_data_clean <- gsub(",", ".", C_DEFL_data_clean)
C_DEFL_data_clean <- as.numeric(C_DEFL_data_clean)
C_DEFL_row_names_data_clean <- row_names[first_non_na_pos:length(C_DEFL_data)]
C_DEFL_list <- list("series_name"= "C_DEFL", "dates"= C_DEFL_row_names_data_clean, "values"= C_DEFL_data_clean)
FATEXP_14_data<-data[,"FATEXP_14"]
first_non_na_pos <- which(!is.na(FATEXP_14_data))[1]
FATEXP_14_data_clean <- FATEXP_10_data[first_non_na_pos:length(FATEXP_14_data)]
FATEXP_14_data_clean <- gsub(",", ".", FATEXP_14_data_clean)
FATEXP_14_data_clean <- as.numeric(FATEXP_14_data_clean)
FATEXP_14_row_names_data_clean <- row_names[first_non_na_pos:length(FATEXP_14_data)]
FATEXP_14_list <- list("series_name"= "FATEXP_14", "dates"= FATEXP_14_row_names_data_clean, "values"= FATEXP_14_data_clean)
input_list <- list(FATEXP_10_list, C_DEFL_list, FATEXP_14_list)
input_list
list("date"=122, "year"=c(1,2,3))
C_DEFL_data_clean
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
# Controlla il pacchetto
check()
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
help(Data_reader_csv)
help(RJDProcessorù)
help(RJDProcessor)
library(tools)
Rd2pdf("C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
library(Rd2pdf)
install.packages(Rd2pdf)
library(tools)
Rd2pdf("C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
install.packages("pkgbuild")
install.packages("pkgbuild")
install.packages("pkgbuild")
library(pkgbuild)
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
print("ciao")
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
install.packages("devtools")
install.packages("devtools")
# Carica il pacchetto devtools
library(devtools)
devtools::build_manual(path = "C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
setwd("C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Assicurati di avere i pacchetti necessari
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
if (!requireNamespace("roxygen2", quietly = TRUE)) {
install.packages("roxygen2")
}
# if (!requireNamespace("pkgbuild", quietly = TRUE)) {
#   install.packages("pkgbuild")
# }
# Carica il pacchetto devtools
library(devtools)
library(roxygen2)
#devtools::load_all("R/import_and_interface_definition.R")
# Genera la documentazione
devtools::document()
# Costruisci il pacchetto
devtools::build()
help("build:manual")
help("build_manual")
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor")
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C://Users//UTENTE//Desktop//RJDopenCruncher")
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
pdflatex --version
system("pdflatex --version")
devtools::build_manual(pkg = "C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
devtools::build_manual(pkg = "C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor/man")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C:\Users\UTENTE\Desktop\RJDopenCruncher\RJDProcessor")
#install.packages("C://Users//UTENTE//Desktop//RJDopenCruncher//RJDProcessor_0.1.4.tar.gz", repos = NULL, type = "source")
devtools::build_manual(pkg = "C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor")
# Controlla il pacchetto
check()
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex test.tex")
file.exists("test.pdf")
devtools::build_manual(pkg = "C:\\Users\\UTENTE\\Desktop\\RJDopenCruncher\\RJDProcessor\\man/")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
pdflatex --version
system("pdflatex test.tex")
pdflatex --version
pdflatex --version
system("pdflatex test.tex")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex test.tex")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex --version")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex --version")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex test.tex")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex test.tex")
writeLines(c(
"\\documentclass{article}",
"\\begin{document}",
"Hello, LaTeX!",
"\\end{document}"
), "test.tex")
# Compilare il file LaTeX
system("pdflatex")
system("pdflatex")
devtools::build_manual(pkg = "C:/Users/UTENTE/Desktop/RJDopenCruncher/RJDProcessor")
