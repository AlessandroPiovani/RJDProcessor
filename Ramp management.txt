se ci sono rampe, in extended_tramoseats_spec_list_from_workspace predisporre il seguente codice, che forza il passaggio a Java:
	
	v_or_ramps_present <- check_if_intervention_vars_or_ramps_present(workspace) # da implementare in JD_JSON_file processor
	
	

sempre in extended_tramoseats_spec_list_from_workspace
  if(v_or_ramps_present) eseguire il codice sotto  
  ################ RAMP MANAGEMENT ################ 
  
  
  mm<-RJDemetra::get_jmodel(ws, progress_bar = TRUE)
  series<-mm[[1]]$AER
  regression<-series$spec$getRegression()
  core<-regression$getCore()
  core_regression<-core$getRegression()
  ramps_count<-core_regression$getRampsCount() # for loop over this
  ramp_1<-core_regression$getRamp(as.integer(0))
  begin_ramp_1<- ramp_1$getStart()$toString()
  end_ramp_1<- ramp_1$getEnd()$toString()
  
  
  
  ####### INTERVENTION VARIABLES MANAGEMENT #######
  
  mm<-RJDemetra::get_jmodel(ws, progress_bar = TRUE)
  series<-mm[[1]]$AER
  regression<-series$spec$getRegression()
  core<-regression$getCore()
  core_regression<-core$getRegression() #until here in common with RAMPS
  intervention_vars_count <- core_regression$getInterventionVariablesCount()
  int_var_1<-core_regression$getInterventionVariable(as.integer(0))
  int_var_1$getName()
  iv_1_delta     <- int_var_1$getDelta()
  iv_1_deltaS    <- int_var_1$getDeltaS()
  iv_1_sequences <- int_var_1$getSequences() #every IV could be created in different times thanks to multiple sequences associated
  n_seq <- iv_1_sequences$length #iterate over this
  iv_1_sequences_seq_1 <- int_var_1$getSequence(as.integer(0))
  iv_1_sequences_seq_1_start <- iv_1_sequences_seq_1$start$toString()
  iv_1_sequences_seq_1_end   <- iv_1_sequences_seq_1$end$toString()
  
  
  
  # require("rJava")
  # mp<- .jcall(ws, "Lec/tstoolkit/jdr/ws/MultiProcessing;", "getMultiProcessing", as.integer(0))
  # #mp$toString()
  # items<-mp$getItems()
  # #items$toString()
  # series_in_ws<-items$get(as.integer(0)) # substitute 0 with TS index
  # sa_def<-series_in_ws$getSaDefinition()
  # ts_series_in_ws<-sa_def$getTs()
  # ts_series_in_ws_metadata <- ts_series_in_ws$getMetaData()
  #   metadata_str <- .jstrVal(ts_series_in_ws_metadata)
  # if (grepl("frequency=Quarterly", metadata_str)) {
  
  
  
  
  #   freq <- 4
  # } else {
  #   #browser()
  #   freq <- 12
  # }
  
  
  #################################################  
  
  
In JD_JSON_file_processor generare le rampe e le intervention variables con i parametri specificati, aggiungendole in coda all'oggetto mts delle variabili esterne userdef
